import telebot
from telebot import types
import psycopg2
import requests
from psycopg2 import sql
from config import bot_token, bot_owner_chat_id


bot = telebot.TeleBot(bot_token)


@bot.message_handler(commands=['start'])
def send_big_description(message):
    description = """
–£—Ö, –∫—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –æ–ø–∏—Å–∞–Ω–∏–µ! –ù—É –æ–∫...

üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ—à–∞–ª–æ–π: /get_help
    
- –¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏ (—ç–∫–∑–∞–º–µ–Ω, –¥–∑, etc), —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –ø—Ä–µ–¥–º–µ—Ç. –ó–∞—Ç–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ —Å—É—Ç—å –∑–∞–¥–∞—á–∏, –ø—Ä–∏–ª–æ–∂–∏ –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è —É —Ç–µ–±—è —Ñ–æ—Ç–æ –∏ —Ñ–∞–π–ª—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é. –ê –º–æ–∂–µ—à—å —ç—Ç–æ–≥–æ –∏ –Ω–µ –¥–µ–ª–∞—Ç—å. –ú—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π, –µ—Å–ª–∏ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É. –£–¥–∞—á–∏!

üìã –°–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (but why?..): /start

–ü–æ–∫–∞ –º—ã –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–º–µ–µ–º üòî
    """
    bot.send_message(message.chat.id, description)


@bot.message_handler(commands=['get_help'])
def get_help(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton('–≠–∫–∑–∞–º–µ–Ω'))
    markup.add(types.KeyboardButton('–î–æ–º–∞—à–∫–∞'))
    markup.add(types.KeyboardButton('–î—Ä—É–≥–æ–µ'))
    bot.send_message(message.chat.id, '–° —á–µ–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?', reply_markup=markup)
    bot.register_next_step_handler(message, save_problem)

def save_problem(message):
    # Save the problem type to the answers table
    answers = {"chat_id": message.chat.id, "problem": message.text}
    
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton('–°–µ–π—á–∞—Å'))
    markup.add(types.KeyboardButton('–ó–∞–≤—Ç—Ä–∞'))
    markup.add(types.KeyboardButton('–ü–æ–∑–∂–µ'))
    bot.send_message(message.chat.id, '–ß—Ç–æ –ø–æ —Å—Ä–æ–∫–∞–º?', reply_markup=markup)
    bot.register_next_step_handler(message, save_urgency, answers)

def save_urgency(message, answers):
    # Save the urgency level to the answers table
    answers["urgency"] = message.text
    
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton('–•–∏–º–∏—è'))
    markup.add(types.KeyboardButton('–§–∏–∑–∏–∫–∞'))
    markup.add(types.KeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'))
    markup.add(types.KeyboardButton('–î—Ä—É–≥–æ–µ'))
    bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç?', reply_markup=markup)
    bot.register_next_step_handler(message, save_subject, answers)

def save_subject(message, answers):
    # Save the subject to the answers table
    answers["subject"] = message.text

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'))

    bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –¥–∞–π –≤—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é '
                                      '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞–∫–æ–π —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—à—å (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ñ–∞–π–ª—ã –∫ —ç–∫–∑–∞–º–µ–Ω—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏). '
                                      '–õ–∏–±–æ –Ω–∞–∂–º–∏ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è',
                                      reply_markup=markup)
    bot.register_next_step_handler(message, save_additional_info, answers)


def save_additional_info(message, answers):
    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':
        send_request_to_owner(answers)
    else:
        # bot.forward_message(chat_id=bot_owner_chat_id, from_chat_id=message.chat.id, message_id=message.message_id)
        if answers.get('additional_resources'):
            answers['additional_resources'].append({'message_id': message.id})
        else:
            answers['additional_resources'] = [{'message_id': message.id}]

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'))

        bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ —Ñ–∞–π–ª—ã, '
                                            '—Å–¥–µ–∞–ª–π —ç—Ç–æ. –ò–ª–∏ –Ω–∞–∂–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É".', reply_markup=markup)
        bot.register_next_step_handler(message, save_additional_info, answers)


def send_request_to_owner(answers):
    # bot.send_message(bot_owner_chat_id, make_request_text(answers))
    bot.send_message(bot_owner_chat_id, create_request_message_for_owner(answers))
    for additional_resource in answers.get('additional_resources', []):
        bot.forward_message(chat_id=bot_owner_chat_id, from_chat_id=answers['chat_id'], message_id=additional_resource['message_id'], disable_notification=True)
    markup = types.ReplyKeyboardMarkup()
    bot.send_message(answers['chat_id'], '–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Ä–µ—à–∞–ª–∞.', reply_markup=markup)


def create_request_message_for_owner(answers):
    user_url = get_user_url_from_chat_id(answers['chat_id'])
    template = """
üåü –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è {0}!

üî¨ –ü—Ä–µ–¥–º–µ—Ç: {1}
üò© –ü—Ä–æ–±–ª–µ–º–∞: {2}
‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {3}
üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {4}.

    """

    return template.format(user_url, answers['subject'], answers['problem'], answers['urgency'],
        '–≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö' if answers.get('additional_resources') else '–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞')


def get_user_url_from_chat_id(chat_id):
    user = bot.get_chat(chat_id)
    if user.username:
        return f"https://t.me/{user.username}"
    else:
        return None


# bot.infinity_polling()
bot.polling()